{"https://moirai2.github.io/schema/daemon/bash":["output=$tmpdir/fantom4.humanCAGE.fq.gz","mkdir -p $tmpdir/download","mkdir -p $tmpdir/download","perl $tmpdir/download.pl http://fantom.gsc.riken.jp/4/download/Tables/human/CAGE/mapping/h04_mapping.tbl.txt.bz2 $tmpdir/download","temp=\"$tmpdir/output.sam\"","output=\"$tmpdir/output.bam\"","perl $tmpdir/convert_mapping_table_to_sam.pl $tmpdir/download/*.bz2 > $temp","samtools view -bSo $output $temp 2>/dev/null","rm -r $tmpdir/download","rm $temp"],"https://moirai2.github.io/schema/daemon/script":[{"https://moirai2.github.io/schema/daemon/script/name":"$tmpdir/download.pl","https://moirai2.github.io/schema/daemon/script/code":["use LWP::UserAgent;","use HTTP::Request;","use File::Basename;","my $url=shift(@ARGV);","my $outdir=shift(@ARGV);","my $agent=new LWP::UserAgent();","$agent->agent('download.pl/1.0');","$agent->timeout(10);","$agent->env_proxy;","my $request=HTTP::Request->new(GET=>$url);","my $filename=\"$outdir/\".basename($url);","my $res=$agent->request($request);","if($res->is_success){","open(OUT,\">$filename\");","print OUT $res->content;","close(OUT);","}elsif($res->is_error){","exit(1);","}"]},{"https://moirai2.github.io/schema/daemon/script/name":"$tmpdir/convert_mapping_table_to_sam.pl","https://moirai2.github.io/schema/daemon/script/code":["use strict 'vars';","use FileHandle;","use File::Basename;","print \"\\@SQ\\tSN:chr1\\tAS:chrom.sizes\\tLN:249250621\\n\";","print \"\\@SQ\\tSN:chr2\\tAS:chrom.sizes\\tLN:243199373\\n\";","print \"\\@SQ\\tSN:chr3\\tAS:chrom.sizes\\tLN:198022430\\n\";","print \"\\@SQ\\tSN:chr4\\tAS:chrom.sizes\\tLN:191154276\\n\";","print \"\\@SQ\\tSN:chr5\\tAS:chrom.sizes\\tLN:180915260\\n\";","print \"\\@SQ\\tSN:chr6\\tAS:chrom.sizes\\tLN:171115067\\n\";","print \"\\@SQ\\tSN:chr7\\tAS:chrom.sizes\\tLN:159138663\\n\";","print \"\\@SQ\\tSN:chr8\\tAS:chrom.sizes\\tLN:146364022\\n\";","print \"\\@SQ\\tSN:chr9\\tAS:chrom.sizes\\tLN:141213431\\n\";","print \"\\@SQ\\tSN:chr10\\tAS:chrom.sizes\\tLN:135534747\\n\";","print \"\\@SQ\\tSN:chr11\\tAS:chrom.sizes\\tLN:135006516\\n\";","print \"\\@SQ\\tSN:chr12\\tAS:chrom.sizes\\tLN:133851895\\n\";","print \"\\@SQ\\tSN:chr13\\tAS:chrom.sizes\\tLN:115169878\\n\";","print \"\\@SQ\\tSN:chr14\\tAS:chrom.sizes\\tLN:107349540\\n\";","print \"\\@SQ\\tSN:chr15\\tAS:chrom.sizes\\tLN:102531392\\n\";","print \"\\@SQ\\tSN:chr16\\tAS:chrom.sizes\\tLN:90354753\\n\";","print \"\\@SQ\\tSN:chr17\\tAS:chrom.sizes\\tLN:81195210\\n\";","print \"\\@SQ\\tSN:chr18\\tAS:chrom.sizes\\tLN:78077248\\n\";","print \"\\@SQ\\tSN:chr19\\tAS:chrom.sizes\\tLN:59128983\\n\";","print \"\\@SQ\\tSN:chr20\\tAS:chrom.sizes\\tLN:63025520\\n\";","print \"\\@SQ\\tSN:chr21\\tAS:chrom.sizes\\tLN:48129895\\n\";","print \"\\@SQ\\tSN:chr22\\tAS:chrom.sizes\\tLN:51304566\\n\";","print \"\\@SQ\\tSN:chrM\\tAS:chrom.sizes\\tLN:16571\\n\";","print \"\\@SQ\\tSN:chrX\\tAS:chrom.sizes\\tLN:155270560\\n\";","print \"\\@SQ\\tSN:chrY\\tAS:chrom.sizes\\tLN:59373566\\n\";","foreach my $file(@ARGV){","  my $basename=basename($file,\"_mapping.tbl.txt.bz2\");","  my $reader=IO::File->new(\"bzip2 -cd $file|\");","  my $preseq;","  my @token;","  while(<$reader>){","    if(/^##/){next;}","    my $line=<$reader>;","    chomp($line);","    @token=split(/\\t/,$line);","    $preseq=$token[0];","    last;","  }","  my $hash={\"reader\"=>$reader,\"token\"=>[\\@token],\"preseq\"=>$preseq};","  while(defined($preseq)){","    my @token=read_next($hash);","    print_seq($basename,@token);","    $preseq=$hash->{\"preseq\"};","  }","  close($reader);","}","sub print_seq{","  my @lines=@_;","  my $basename=shift(@lines);","  my $maxweight=0;","  foreach my $line(@lines){if($line->[15]>$maxweight){$maxweight=$line->[15];}}","  foreach my $line(@lines){","    my ($seq,$library_count,$edit_string,$rname,$strand,$start,$end,$percentage,$map_pos,$ribo_flag,$refseq_flag,$rna,$rna_count,$tpm_in_ribo,$tpm_ex_ribo,$weight,$rescue_weight)=@{$line};","    $rna=~tr/ /_/;","    my $length=length($seq);","    my $qual=\"\";","    for(my $i=0;$i<$length;$i++){$qual.=\"/\";}","    my $flag=0;","    my $pos=$start;","    my $length=$end-$start+1;","    if($strand eq\"-\"){$flag+=16;$pos=$end;}","    my $cigar=$length.\"M\";","    if($edit_string eq\"ORIGINAL\"){","    }else{","      $cigar=\"\";","      my $index=0;","      foreach my $c(split(/,/,$edit_string)){","        if($c=~/^(\\w)(\\d+)/){","          my $edit=$1;","          my $pos=$2;","          if($edit eq\"M\"){","          }elsif($edit eq\"I\"){","            if($index<$pos){","              $cigar.=($pos-$index).\"M\";","              $cigar.=\"1I\";","              $index=$pos+1;$length--;","            }","          }elsif($edit eq\"D\"){","            if($pos==$index){","              $cigar.=\"1S\";$length--;$index=$pos;","            }elsif($pos>$index){","              $cigar.=($pos-$index).\"M\";","              $cigar.=\"1D\";$index=$pos-1;","            }","          }","        }","      }","      if($index<$length){$cigar.=($length-$index).\"M\";}","    }","    $cigar=~s/1S1S/2S/;","    for(my $j=0;$j<$rna_count;$j++){","      my $id=\"$basename|$rna|$seq|\".($j+1);","      my $flag2=$flag;","      if($weight<$maxweight){next;}","      print \"$id\\t$flag2\\t$rname\\t$pos\\t255\\t$cigar\\t*\\t0\\t0\\t$seq\\t$qual\\n\";","    }","  }","}","sub read_next{","  my $hash=shift();","  my $reader=$hash->{\"reader\"};","  my $preseq=$hash->{\"preseq\"};","  my @array=@{$hash->{\"token\"}};","  while(!eof($reader)){","    my $line=<$reader>;","    chomp($line);","    my @token=split(/\\t/,$line);","    my $sequence=$token[0];","    if($sequence eq $preseq){","      push(@array,\\@token);","    }else{","      $hash->{\"preseq\"}=$sequence;","      $hash->{\"token\"}=[\\@token];","      last;","    }","  }","  if(eof($reader)){delete($hash->{\"preseq\"});}","  return @array;","}"]}],"https://moirai2.github.io/schema/daemon/output":"$output"}
