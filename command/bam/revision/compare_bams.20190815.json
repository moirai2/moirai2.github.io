{"https://moirai2.github.io/schema/daemon/input":["$bam1","$bam2"],"https://moirai2.github.io/schema/daemon/bash":["output=($(perl $tmpdir/compare_bams.pl $bam1 $bam2))","mapped_mapped=${output[0]}","mapped_unmapped=${output[1]}","unmapped_mapped=${output[2]}","unmapped_unmapped=${output[3]}"],"https://moirai2.github.io/schema/daemon/script":{"https://moirai2.github.io/schema/daemon/script/name":"$tmpdir/compare_bams.pl","https://moirai2.github.io/schema/daemon/script/code":["my $input1=$ARGV[0];","my $input2=$ARGV[1];","mkdir($outdir);","my $pairedend1=`(samtools view -H $input1;samtools view $input1|head -n 1000)|samtools view -S -c -f 1 '-'`;","my $pairedend2=`(samtools view -H $input2;samtools view $input2|head -n 1000)|samtools view -S -c -f 1 '-'`;","chomp($pairedend1);","chomp($pairedend2);","if($pairedend1>0){$pairedend1=1}","if($pairedend2>0){$pairedend2=1}","if($pairedend1!=$pairedend2){","  if($pairedend1){print STDERR \"ERROR: $input1 is paired-end, but $input2 is single-end\n\";}","  else{print STDERR \"ERROR: $input1 is single-end, but $input2 is paired-end\n\";}","  exit(1);","}","my $map_map=0;","my $map_unmap=0;","my $unmap_map=0;","my $unmap_unmap=0;","open($reader1,\"samtools view -F 0x100 $input1|\");","open($reader2,\"samtools view -F 0x100 $input2|\");","my $hash1={\"reader\"=>$reader1};","my $hash2={\"reader\"=>$reader2};","my ($id1,$map1,@array1)=read_next($hash1,$pairedend1);","my ($id2,$map2,@array2)=read_next($hash2,$pairedend2);","while(scalar(@array1)>0){","  if($map1>0){","    if($map2>0){$map_map++;}","    else{$map_unmap++;}","  }else{","    if($map2>0){$unmap_map++;}","    else{$unmap_unmap++;}","  }","  ($id1,@array1)=read_next($hash1,$pairedend1);","  ($id2,@array2)=read_next($hash2,$pairedend2);","}","close($read1);","close($read2);","print \"$map_map\n\";","print \"$map_unmap\n\";","print \"$unmap_map\n\";","print \"$unmap_unmap\n\";","############################## next ##############################","sub read_next{","  my $hash=shift();","  my $pairedend=shift();","  my $reader=$hash->{\"reader\"};","  my $line;","  if(!exists($hash->{\"line\"})){$line=<$reader>;chomp($line);}","  else{$line=$hash->{\"line\"};}","  if(eof($reader)){","    delete($hash->{\"line\"});","    if(!defined($line)){return;}","  }","  my @token=split(/\t/,$line);","  my $mapped=0;","  my $id=$token[0];","  if(($token[1]&4)==0){if($pairedend&&(($token[1]&2)==0)){last;}$mapped++;}","  my @array=();","  push(@array,\@token);","  while(<$reader>){","    chomp;","    my @token=split(/\t/);","    if($id eq $token[0]){push(@array,\@token);}","    else{$hash->{\"line\"}=$_;last;}","    if(($token[1]&4)==0){if($pairedend&&(($token[1]&2)==0)){last;}$mapped++;}","  }","  return ($id,$mapped,@array);","}"]},"https://moirai2.github.io/schema/daemon/output":["$mapped_mapped","$mapped_unmapped","$unmapped_mapped","$unmapped_unmapped"]}
